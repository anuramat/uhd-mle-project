from agent_code.vkl.preprocessing import get_map
import base64

# used in the "eval()"
from numpy import array  # pyright: ignore


class TestUtils:
    def state_dict(self):
        base64_message = """eydyb3VuZCc6IDEsICdzdGVwJzogMTMsICdmaWVsZCc6IGFycmF5KFtbLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsCiAgICAgICAgLTFdLAogICAgICAgWy0xLCAgMCwgIDAsICAxLCAgMCwgIDEsICAxLCAgMSwgIDEsICAxLCAgMSwgIDEsICAxLCAgMSwgIDAsICAwLAogICAgICAgIC0xXSwKICAgICAgIFstMSwgIDAsIC0xLCAgMSwgLTEsICAxLCAtMSwgIDEsIC0xLCAgMSwgLTEsICAxLCAtMSwgIDEsIC0xLCAgMCwKICAgICAgICAtMV0sCiAgICAgICBbLTEsICAwLCAgMSwgIDAsICAxLCAgMSwgIDEsICAxLCAgMSwgIDEsICAwLCAgMSwgIDEsICAxLCAgMCwgIDAsCiAgICAgICAgLTFdLAogICAgICAgWy0xLCAgMCwgLTEsICAxLCAtMSwgIDEsIC0xLCAgMSwgLTEsICAxLCAtMSwgIDEsIC0xLCAgMSwgLTEsICAwLAogICAgICAgIC0xXSwKICAgICAgIFstMSwgIDAsICAxLCAgMSwgIDAsICAxLCAgMCwgIDAsICAxLCAgMSwgIDEsICAwLCAgMSwgIDEsICAxLCAgMCwKICAgICAgICAtMV0sCiAgICAgICBbLTEsICAwLCAtMSwgIDEsIC0xLCAgMSwgLTEsICAxLCAtMSwgIDAsIC0xLCAgMCwgLTEsICAwLCAtMSwgIDEsCiAgICAgICAgLTFdLAogICAgICAgWy0xLCAgMSwgIDAsICAxLCAgMSwgIDEsICAxLCAgMSwgIDEsICAxLCAgMSwgIDEsICAwLCAgMSwgIDAsICAxLAogICAgICAgIC0xXSwKICAgICAgIFstMSwgIDAsIC0xLCAgMCwgLTEsICAxLCAtMSwgIDEsIC0xLCAgMSwgLTEsICAxLCAtMSwgIDEsIC0xLCAgMSwKICAgICAgICAtMV0sCiAgICAgICBbLTEsICAxLCAgMSwgIDAsICAxLCAgMSwgIDEsICAxLCAgMSwgIDAsICAwLCAgMSwgIDEsICAxLCAgMSwgIDEsCiAgICAgICAgLTFdLAogICAgICAgWy0xLCAgMSwgLTEsICAxLCAtMSwgIDEsIC0xLCAgMSwgLTEsICAxLCAtMSwgIDEsIC0xLCAgMCwgLTEsICAxLAogICAgICAgIC0xXSwKICAgICAgIFstMSwgIDEsICAxLCAgMSwgIDEsICAxLCAgMSwgIDEsICAxLCAgMSwgIDEsICAxLCAgMSwgIDEsICAxLCAgMSwKICAgICAgICAtMV0sCiAgICAgICBbLTEsICAxLCAtMSwgIDAsIC0xLCAgMCwgLTEsICAxLCAtMSwgIDEsIC0xLCAgMSwgLTEsICAxLCAtMSwgIDEsCiAgICAgICAgLTFdLAogICAgICAgWy0xLCAgMCwgIDEsICAwLCAgMCwgIDEsICAxLCAgMSwgIDEsICAwLCAgMSwgIDEsICAxLCAgMSwgIDEsICAxLAogICAgICAgIC0xXSwKICAgICAgIFstMSwgIDAsIC0xLCAgMSwgLTEsICAxLCAtMSwgIDEsIC0xLCAgMCwgLTEsICAwLCAtMSwgIDAsIC0xLCAgMCwKICAgICAgICAtMV0sCiAgICAgICBbLTEsICAwLCAgMCwgIDAsICAwLCAgMCwgIDEsICAwLCAgMSwgIDEsICAxLCAgMCwgIDAsICAwLCAgMCwgIDAsCiAgICAgICAgLTFdLAogICAgICAgWy0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLCAtMSwgLTEsIC0xLAogICAgICAgIC0xXV0pLCAnc2VsZic6ICgnd2F0Y2hlcicsIDAsIEZhbHNlLCAoMTUsIDEpKSwgJ290aGVycyc6IFsoJ3J1bGVfYmFzZWRfYWdlbnRfMCcsIDAsIEZhbHNlLCAoMTUsIDE0KSksICgncnVsZV9iYXNlZF9hZ2VudF8xJywgMCwgRmFsc2UsICgyLCAxKSksICgncnVsZV9iYXNlZF9hZ2VudF8yJywgMCwgRmFsc2UsICgyLCAxNSkpXSwgJ2JvbWJzJzogWygoMSwgMTQpLCAxKSwgKCgxNCwgMTUpLCAxKSwgKCgxMywgMSksIDEpLCAoKDEsIDIpLCAxKV0sICdjb2lucyc6IFtdLCAndXNlcl9pbnB1dCc6IE5vbmUsICdleHBsb3Npb25fbWFwJzogYXJyYXkoW1swLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwKICAgICAgICAwLl0sCiAgICAgICBbMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sCiAgICAgICAgMC5dLAogICAgICAgWzAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLAogICAgICAgIDAuXSwKICAgICAgIFswLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwKICAgICAgICAwLl0sCiAgICAgICBbMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sCiAgICAgICAgMC5dLAogICAgICAgWzAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLAogICAgICAgIDAuXSwKICAgICAgIFswLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwKICAgICAgICAwLl0sCiAgICAgICBbMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sCiAgICAgICAgMC5dLAogICAgICAgWzAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLAogICAgICAgIDAuXSwKICAgICAgIFswLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwKICAgICAgICAwLl0sCiAgICAgICBbMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sCiAgICAgICAgMC5dLAogICAgICAgWzAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLAogICAgICAgIDAuXSwKICAgICAgIFswLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwKICAgICAgICAwLl0sCiAgICAgICBbMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sCiAgICAgICAgMC5dLAogICAgICAgWzAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLAogICAgICAgIDAuXSwKICAgICAgIFswLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwKICAgICAgICAwLl0sCiAgICAgICBbMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sIDAuLCAwLiwgMC4sCiAgICAgICAgMC5dXSl9"""
        base64_bytes = base64_message.encode("ascii")
        message_bytes = base64.b64decode(base64_bytes)
        message = message_bytes.decode("ascii")
        return eval(message)

    def test_get_map(self):
        assert get_map(self.state_dict()) is not None
